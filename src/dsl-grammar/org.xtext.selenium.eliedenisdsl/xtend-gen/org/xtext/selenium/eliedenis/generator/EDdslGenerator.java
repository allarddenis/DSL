/**
 * generated by Xtext 2.12.0
 */
package org.xtext.selenium.eliedenis.generator;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.io.File;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.selenium.eliedenis.eDdsl.ActionNoReturn;
import org.xtext.selenium.eliedenis.eDdsl.All;
import org.xtext.selenium.eliedenis.eDdsl.Browse;
import org.xtext.selenium.eliedenis.eDdsl.BrowserEnum;
import org.xtext.selenium.eliedenis.eDdsl.Check;
import org.xtext.selenium.eliedenis.eDdsl.Click;
import org.xtext.selenium.eliedenis.eDdsl.Operation;
import org.xtext.selenium.eliedenis.eDdsl.Series;
import org.xtext.selenium.eliedenis.eDdsl.Test;
import org.xtext.selenium.eliedenis.eDdsl.Type;
import org.xtext.selenium.eliedenis.eDdsl.VariableSet;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class EDdslGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    Test test = ((Test) _head);
    String sep = File.separator;
    String filePath = (("denis" + sep) + "TestLauncher.java");
    fsa.generateFile(filePath, this.compileHeader(test));
  }
  
  public CharSequence compileHeader(final Test test) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("    ");
    _builder.append("import org.openqa.selenium.By;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("import org.openqa.selenium.WebDriver;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("import org.openqa.selenium.WebElement;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("import org.openqa.selenium.firefox.FirefoxDriver;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("import org.openqa.selenium.support.ui.ExpectedCondition;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("import org.openqa.selenium.support.ui.WebDriverWait;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("public class TestApp {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SwingUtilities.invokeLater(new Runnable() { ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    CharSequence _initiateDriver = this.initiateDriver(test.getTests());
    _builder.append(_initiateDriver, "\t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence initiateDriver(final Series series) {
    StringConcatenation _builder = new StringConcatenation();
    {
      BrowserEnum _browser = series.getBrowser();
      boolean _equals = Objects.equal(_browser, BrowserEnum.FIREFOX);
      if (_equals) {
        _builder.append("WebDriver driver = new FireFoxDriver();");
        _builder.newLine();
        _builder.newLine();
        CharSequence _core = this.core(series);
        _builder.append(_core);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("driver.quit();");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence core(final Series series) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Operation> _operations = series.getOperations();
      for(final Operation op : _operations) {
        CharSequence _writeOperation = this.writeOperation(op.getAction());
        _builder.append(_writeOperation);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _writeOperation(final All allAction) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  protected CharSequence _writeOperation(final Browse browseAction) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver.get(\"");
    String _url = browseAction.getUrl();
    _builder.append(_url);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _writeOperation(final Check checkAction) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("    ");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _writeOperation(final Click clickAction) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("    ");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _writeOperation(final Type typeAction) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  protected CharSequence _writeOperation(final VariableSet variableSetAction) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence writeOperation(final ActionNoReturn allAction) {
    if (allAction instanceof All) {
      return _writeOperation((All)allAction);
    } else if (allAction instanceof Browse) {
      return _writeOperation((Browse)allAction);
    } else if (allAction instanceof Check) {
      return _writeOperation((Check)allAction);
    } else if (allAction instanceof Click) {
      return _writeOperation((Click)allAction);
    } else if (allAction instanceof Type) {
      return _writeOperation((Type)allAction);
    } else if (allAction instanceof VariableSet) {
      return _writeOperation((VariableSet)allAction);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(allAction).toString());
    }
  }
}
