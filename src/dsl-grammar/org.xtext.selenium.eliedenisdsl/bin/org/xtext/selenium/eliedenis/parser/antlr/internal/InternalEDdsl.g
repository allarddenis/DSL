/*
 * generated by Xtext 2.12.0
 */
grammar InternalEDdsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.selenium.eliedenis.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.selenium.eliedenis.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.selenium.eliedenis.services.EDdslGrammarAccess;

}

@parser::members {

 	private EDdslGrammarAccess grammarAccess;

    public InternalEDdslParser(TokenStream input, EDdslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected EDdslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getModelSeriesParserRuleCall_0());
			}
			lv_model_0_0=ruleSeries
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				set(
					$current,
					"model",
					lv_model_0_0,
					"org.xtext.selenium.eliedenis.EDdsl.Series");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleActionNoReturn
entryRuleActionNoReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionNoReturnRule()); }
	iv_ruleActionNoReturn=ruleActionNoReturn
	{ $current=$iv_ruleActionNoReturn.current; }
	EOF;

// Rule ActionNoReturn
ruleActionNoReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActionNoReturnAccess().getActionAllParserRuleCall_0_0());
				}
				lv_action_0_1=ruleAll
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionNoReturnRule());
					}
					set(
						$current,
						"action",
						lv_action_0_1,
						"org.xtext.selenium.eliedenis.EDdsl.All");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getActionNoReturnAccess().getActionBrowseParserRuleCall_0_1());
				}
				lv_action_0_2=ruleBrowse
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionNoReturnRule());
					}
					set(
						$current,
						"action",
						lv_action_0_2,
						"org.xtext.selenium.eliedenis.EDdsl.Browse");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getActionNoReturnAccess().getActionCheckParserRuleCall_0_2());
				}
				lv_action_0_3=ruleCheck
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionNoReturnRule());
					}
					set(
						$current,
						"action",
						lv_action_0_3,
						"org.xtext.selenium.eliedenis.EDdsl.Check");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getActionNoReturnAccess().getActionClickParserRuleCall_0_3());
				}
				lv_action_0_4=ruleClick
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionNoReturnRule());
					}
					set(
						$current,
						"action",
						lv_action_0_4,
						"org.xtext.selenium.eliedenis.EDdsl.Click");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getActionNoReturnAccess().getActionTypeParserRuleCall_0_4());
				}
				lv_action_0_5=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionNoReturnRule());
					}
					set(
						$current,
						"action",
						lv_action_0_5,
						"org.xtext.selenium.eliedenis.EDdsl.Type");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getActionNoReturnAccess().getActionVariableSetParserRuleCall_0_5());
				}
				lv_action_0_6=ruleVariableSet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionNoReturnRule());
					}
					set(
						$current,
						"action",
						lv_action_0_6,
						"org.xtext.selenium.eliedenis.EDdsl.VariableSet");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleActionReturn
entryRuleActionReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionReturnRule()); }
	iv_ruleActionReturn=ruleActionReturn
	{ $current=$iv_ruleActionReturn.current; }
	EOF;

// Rule ActionReturn
ruleActionReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActionReturnAccess().getActionCountParserRuleCall_0_0());
				}
				lv_action_0_1=ruleCount
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionReturnRule());
					}
					set(
						$current,
						"action",
						lv_action_0_1,
						"org.xtext.selenium.eliedenis.EDdsl.Count");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getActionReturnAccess().getActionReadParserRuleCall_0_1());
				}
				lv_action_0_2=ruleRead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionReturnRule());
					}
					set(
						$current,
						"action",
						lv_action_0_2,
						"org.xtext.selenium.eliedenis.EDdsl.Read");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleActionBoolReturn
entryRuleActionBoolReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionBoolReturnRule()); }
	iv_ruleActionBoolReturn=ruleActionBoolReturn
	{ $current=$iv_ruleActionBoolReturn.current; }
	EOF;

// Rule ActionBoolReturn
ruleActionBoolReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActionBoolReturnAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActionBoolReturnAccess().getConstraintParserRuleCall_1());
		}
		this_Constraint_1=ruleConstraint
		{
			$current = $this_Constraint_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAll
entryRuleAll returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllRule()); }
	iv_ruleAll=ruleAll
	{ $current=$iv_ruleAll.current; }
	EOF;

// Rule All
ruleAll returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='all'
		{
			newLeafNode(otherlv_0, grammarAccess.getAllAccess().getAllKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAllAccess().getOperationActionNoReturnParserRuleCall_1_0());
				}
				lv_operation_1_0=ruleActionNoReturn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAllRule());
					}
					set(
						$current,
						"operation",
						lv_operation_1_0,
						"org.xtext.selenium.eliedenis.EDdsl.ActionNoReturn");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='attribute'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getAttributeKeyword_0());
		}
		(
			(
				lv_attributeName_1_0=RULE_STRING
				{
					newLeafNode(lv_attributeName_1_0, grammarAccess.getAttributeAccess().getAttributeNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"attributeName",
						lv_attributeName_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				lv_attributeValue_2_0=RULE_STRING
				{
					newLeafNode(lv_attributeValue_2_0, grammarAccess.getAttributeAccess().getAttributeValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"attributeValue",
						lv_attributeValue_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleBrowse
entryRuleBrowse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBrowseRule()); }
	iv_ruleBrowse=ruleBrowse
	{ $current=$iv_ruleBrowse.current; }
	EOF;

// Rule Browse
ruleBrowse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='browse'
		{
			newLeafNode(otherlv_0, grammarAccess.getBrowseAccess().getBrowseKeyword_0());
		}
		(
			(
				lv_url_1_0=RULE_STRING
				{
					newLeafNode(lv_url_1_0, grammarAccess.getBrowseAccess().getUrlSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBrowseRule());
					}
					setWithLastConsumed(
						$current,
						"url",
						lv_url_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleCheck
entryRuleCheck returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckRule()); }
	iv_ruleCheck=ruleCheck
	{ $current=$iv_ruleCheck.current; }
	EOF;

// Rule Check
ruleCheck returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='check'
		{
			newLeafNode(otherlv_0, grammarAccess.getCheckAccess().getCheckKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckAccess().getActionActionBoolReturnParserRuleCall_1_0());
				}
				lv_action_1_0=ruleActionBoolReturn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckRule());
					}
					set(
						$current,
						"action",
						lv_action_1_0,
						"org.xtext.selenium.eliedenis.EDdsl.ActionBoolReturn");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='comparison'
		{
			newLeafNode(otherlv_0, grammarAccess.getComparisonAccess().getComparisonKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonAccess().getFirstValValParserRuleCall_1_0());
				}
				lv_firstVal_1_0=ruleVal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonRule());
					}
					set(
						$current,
						"firstVal",
						lv_firstVal_1_0,
						"org.xtext.selenium.eliedenis.EDdsl.Val");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonAccess().getComparatorOperatorComparisonOperatorEnumEnumRuleCall_2_0());
				}
				lv_comparatorOperator_2_0=ruleComparisonOperatorEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonRule());
					}
					set(
						$current,
						"comparatorOperator",
						lv_comparatorOperator_2_0,
						"org.xtext.selenium.eliedenis.EDdsl.ComparisonOperatorEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonAccess().getSecondValValParserRuleCall_3_0());
				}
				lv_secondVal_3_0=ruleVal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonRule());
					}
					set(
						$current,
						"secondVal",
						lv_secondVal_3_0,
						"org.xtext.selenium.eliedenis.EDdsl.Val");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getReadableElementReadableEnumEnumRuleCall_0_0());
				}
				lv_readableElement_0_0=ruleReadableEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					set(
						$current,
						"readableElement",
						lv_readableElement_0_0,
						"org.xtext.selenium.eliedenis.EDdsl.ReadableEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getConstraintTypeConstraintTypeEnumEnumRuleCall_1_0());
				}
				lv_constraintType_1_0=ruleConstraintTypeEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					set(
						$current,
						"constraintType",
						lv_constraintType_1_0,
						"org.xtext.selenium.eliedenis.EDdsl.ConstraintTypeEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getExpectedValValParserRuleCall_2_0());
				}
				lv_expectedVal_2_0=ruleVal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					set(
						$current,
						"expectedVal",
						lv_expectedVal_2_0,
						"org.xtext.selenium.eliedenis.EDdsl.Val");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getParametersParametersParserRuleCall_3_0());
				}
				lv_parameters_3_0=ruleParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_3_0,
						"org.xtext.selenium.eliedenis.EDdsl.Parameters");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCount
entryRuleCount returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCountRule()); }
	iv_ruleCount=ruleCount
	{ $current=$iv_ruleCount.current; }
	EOF;

// Rule Count
ruleCount returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='count'
		{
			newLeafNode(otherlv_0, grammarAccess.getCountAccess().getCountKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCountAccess().getParametersParametersParserRuleCall_1_0_0());
					}
					lv_parameters_1_1=ruleParameters
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCountRule());
						}
						set(
							$current,
							"parameters",
							lv_parameters_1_1,
							"org.xtext.selenium.eliedenis.EDdsl.Parameters");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getCountAccess().getParametersActionReturnParserRuleCall_1_0_1());
					}
					lv_parameters_1_2=ruleActionReturn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCountRule());
						}
						set(
							$current,
							"parameters",
							lv_parameters_1_2,
							"org.xtext.selenium.eliedenis.EDdsl.ActionReturn");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleClick
entryRuleClick returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClickRule()); }
	iv_ruleClick=ruleClick
	{ $current=$iv_ruleClick.current; }
	EOF;

// Rule Click
ruleClick returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='click'
		{
			newLeafNode(otherlv_0, grammarAccess.getClickAccess().getClickKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClickAccess().getClickableElementClickableEnumEnumRuleCall_1_0());
				}
				lv_clickableElement_1_0=ruleClickableEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClickRule());
					}
					set(
						$current,
						"clickableElement",
						lv_clickableElement_1_0,
						"org.xtext.selenium.eliedenis.EDdsl.ClickableEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getClickAccess().getParametersParametersParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClickRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_2_0,
						"org.xtext.selenium.eliedenis.EDdsl.Parameters");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationAccess().getActionNoReturnParserRuleCall_0());
		}
		this_ActionNoReturn_0=ruleActionNoReturn
		{
			$current = $this_ActionNoReturn_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=';'
		{
			newLeafNode(otherlv_1, grammarAccess.getOperationAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getParameterAttributeParserRuleCall_1_0_0());
					}
					lv_parameter_1_1=ruleAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"parameter",
							lv_parameter_1_1,
							"org.xtext.selenium.eliedenis.EDdsl.Attribute");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getParameterAccess().getParameterValueParserRuleCall_1_0_1());
					}
					lv_parameter_1_2=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						set(
							$current,
							"parameter",
							lv_parameter_1_2,
							"org.xtext.selenium.eliedenis.EDdsl.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleParameters
entryRuleParameters returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleParameters=ruleParameters
	{ $current=$iv_ruleParameters.current; }
	EOF;

// Rule Parameters
ruleParameters returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getParametersAccess().getParametersParameterParserRuleCall_0());
			}
			lv_parameters_0_0=ruleParameter
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getParametersRule());
				}
				add(
					$current,
					"parameters",
					lv_parameters_0_0,
					"org.xtext.selenium.eliedenis.EDdsl.Parameter");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleRead
entryRuleRead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReadRule()); }
	iv_ruleRead=ruleRead
	{ $current=$iv_ruleRead.current; }
	EOF;

// Rule Read
ruleRead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='read'
		{
			newLeafNode(otherlv_0, grammarAccess.getReadAccess().getReadKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReadAccess().getReadableElementReadableEnumEnumRuleCall_1_0());
				}
				lv_readableElement_1_0=ruleReadableEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReadRule());
					}
					set(
						$current,
						"readableElement",
						lv_readableElement_1_0,
						"org.xtext.selenium.eliedenis.EDdsl.ReadableEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReadAccess().getParametersParametersParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReadRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_2_0,
						"org.xtext.selenium.eliedenis.EDdsl.Parameters");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSeries
entryRuleSeries returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSeriesRule()); }
	iv_ruleSeries=ruleSeries
	{ $current=$iv_ruleSeries.current; }
	EOF;

// Rule Series
ruleSeries returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='open'
		{
			newLeafNode(otherlv_0, grammarAccess.getSeriesAccess().getOpenKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSeriesAccess().getBrowserBrowserEnumEnumRuleCall_1_0());
				}
				lv_browser_1_0=ruleBrowserEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSeriesRule());
					}
					set(
						$current,
						"browser",
						lv_browser_1_0,
						"org.xtext.selenium.eliedenis.EDdsl.BrowserEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSeriesAccess().getExpectedReturnBoolEnumEnumRuleCall_2_0());
				}
				lv_expectedReturn_2_0=ruleBoolEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSeriesRule());
					}
					set(
						$current,
						"expectedReturn",
						lv_expectedReturn_2_0,
						"org.xtext.selenium.eliedenis.EDdsl.BoolEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getSeriesAccess().getSemicolonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSeriesAccess().getOperationsOperationParserRuleCall_4_0());
				}
				lv_operations_4_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSeriesRule());
					}
					add(
						$current,
						"operations",
						lv_operations_4_0,
						"org.xtext.selenium.eliedenis.EDdsl.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getTextToTypeValParserRuleCall_1_0());
				}
				lv_textToType_1_0=ruleVal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"textToType",
						lv_textToType_1_0,
						"org.xtext.selenium.eliedenis.EDdsl.Val");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getParametersParametersParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleParameters
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_2_0,
						"org.xtext.selenium.eliedenis.EDdsl.Parameters");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVal
entryRuleVal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValRule()); }
	iv_ruleVal=ruleVal
	{ $current=$iv_ruleVal.current; }
	EOF;

// Rule Val
ruleVal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValAccess().getVariableGetParserRuleCall_0());
		}
		this_VariableGet_0=ruleVariableGet
		{
			$current = $this_VariableGet_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		this_STRING_1=RULE_STRING
		{
			newLeafNode(this_STRING_1, grammarAccess.getValAccess().getSTRINGTerminalRuleCall_1());
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValAccess().getBoolBoolEnumEnumRuleCall_2_0());
				}
				lv_bool_2_0=ruleBoolEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValRule());
					}
					set(
						$current,
						"bool",
						lv_bool_2_0,
						"org.xtext.selenium.eliedenis.EDdsl.BoolEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='value'
		{
			newLeafNode(otherlv_0, grammarAccess.getValueAccess().getValueKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getValueValParserRuleCall_1_0());
				}
				lv_value_1_0=ruleVal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.xtext.selenium.eliedenis.EDdsl.Val");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVariableGet
entryRuleVariableGet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableGetRule()); }
	iv_ruleVariableGet=ruleVariableGet
	{ $current=$iv_ruleVariableGet.current; }
	EOF;

// Rule VariableGet
ruleVariableGet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_varName_0_0=RULE_ID
			{
				newLeafNode(lv_varName_0_0, grammarAccess.getVariableGetAccess().getVarNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableGetRule());
				}
				setWithLastConsumed(
					$current,
					"varName",
					lv_varName_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleVariableSet
entryRuleVariableSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableSetRule()); }
	iv_ruleVariableSet=ruleVariableSet
	{ $current=$iv_ruleVariableSet.current; }
	EOF;

// Rule VariableSet
ruleVariableSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_varName_0_0=RULE_ID
				{
					newLeafNode(lv_varName_0_0, grammarAccess.getVariableSetAccess().getVarNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableSetRule());
					}
					setWithLastConsumed(
						$current,
						"varName",
						lv_varName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableSetAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableSetAccess().getActionActionReturnParserRuleCall_2_0());
				}
				lv_action_2_0=ruleActionReturn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableSetRule());
					}
					set(
						$current,
						"action",
						lv_action_2_0,
						"org.xtext.selenium.eliedenis.EDdsl.ActionReturn");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule BoolEnum
ruleBoolEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='true'
			{
				$current = grammarAccess.getBoolEnumAccess().getTrueEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBoolEnumAccess().getTrueEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='false'
			{
				$current = grammarAccess.getBoolEnumAccess().getFalseEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBoolEnumAccess().getFalseEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule BrowserEnum
ruleBrowserEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='firefox'
			{
				$current = grammarAccess.getBrowserEnumAccess().getFirefoxEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBrowserEnumAccess().getFirefoxEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='ie'
			{
				$current = grammarAccess.getBrowserEnumAccess().getIEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBrowserEnumAccess().getIEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ClickableEnum
ruleClickableEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='button'
			{
				$current = grammarAccess.getClickableEnumAccess().getButtonEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getClickableEnumAccess().getButtonEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='link'
			{
				$current = grammarAccess.getClickableEnumAccess().getLinkEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getClickableEnumAccess().getLinkEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='input'
			{
				$current = grammarAccess.getClickableEnumAccess().getInputEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getClickableEnumAccess().getInputEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule ComparisonOperatorEnum
ruleComparisonOperatorEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getComparisonOperatorEnumAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getComparisonOperatorEnumAccess().getEqualEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>'
			{
				$current = grammarAccess.getComparisonOperatorEnumAccess().getSuperiorEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getComparisonOperatorEnumAccess().getSuperiorEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<'
			{
				$current = grammarAccess.getComparisonOperatorEnumAccess().getInferiorEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getComparisonOperatorEnumAccess().getInferiorEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>='
			{
				$current = grammarAccess.getComparisonOperatorEnumAccess().getSupEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getComparisonOperatorEnumAccess().getSupEqualEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='<='
			{
				$current = grammarAccess.getComparisonOperatorEnumAccess().getInfEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getComparisonOperatorEnumAccess().getInfEqualEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule ConstraintTypeEnum
ruleConstraintTypeEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='contain'
			{
				$current = grammarAccess.getConstraintTypeEnumAccess().getContainEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getConstraintTypeEnumAccess().getContainEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='enabled'
			{
				$current = grammarAccess.getConstraintTypeEnumAccess().getEnabledEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getConstraintTypeEnumAccess().getEnabledEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ReadableEnum
ruleReadableEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='button'
			{
				$current = grammarAccess.getReadableEnumAccess().getButtonEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getReadableEnumAccess().getButtonEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='link'
			{
				$current = grammarAccess.getReadableEnumAccess().getLinkEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getReadableEnumAccess().getLinkEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='input'
			{
				$current = grammarAccess.getReadableEnumAccess().getInputEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getReadableEnumAccess().getInputEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='h1'
			{
				$current = grammarAccess.getReadableEnumAccess().getH1EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getReadableEnumAccess().getH1EnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
