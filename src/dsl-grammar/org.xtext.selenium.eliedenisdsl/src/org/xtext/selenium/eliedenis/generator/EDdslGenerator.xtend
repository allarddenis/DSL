/*
 * generated by Xtext 2.12.0
 */
package org.xtext.selenium.eliedenis.generator
 
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
 
import com.google.inject.Inject
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

// Models
import org.xtext.selenium.eliedenis.eDdsl.Test
import java.io.File
import org.xtext.selenium.eliedenis.eDdsl.Series
import org.xtext.selenium.eliedenis.eDdsl.BrowserEnum
import org.xtext.selenium.eliedenis.eDdsl.Operation
import org.xtext.selenium.eliedenis.eDdsl.ActionNoReturn
import org.xtext.selenium.eliedenis.eDdsl.Browse
import org.xtext.selenium.eliedenis.eDdsl.All
import org.xtext.selenium.eliedenis.eDdsl.Check
import org.xtext.selenium.eliedenis.eDdsl.Click
import org.xtext.selenium.eliedenis.eDdsl.Type
import org.xtext.selenium.eliedenis.eDdsl.VariableSet

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EDdslGenerator extends AbstractGenerator {

	@Inject extension IQualifiedNameProvider
 
    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        var test = resource.contents.head as Test
		var sep = File.separator
		
		var filePath = 'denis' + sep + 'TestLauncher.java';
		fsa.generateFile(filePath, test.compileHeader);
    }
    

    def compileHeader(Test test)'''
    import org.openqa.selenium.By;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.WebElement;
    import org.openqa.selenium.firefox.FirefoxDriver;
    import org.openqa.selenium.support.ui.ExpectedCondition;
    import org.openqa.selenium.support.ui.WebDriverWait;
    
	public class TestApp {
		public static void main(String[] args) {
			SwingUtilities.invokeLater(new Runnable() { 
				public void run() {
					«test.tests.initiateDriver»
				}
			});
		}
	}
    '''
    
    def initiateDriver(Series series)'''
	«IF series.browser == BrowserEnum.FIREFOX»
		WebDriver driver = new FireFoxDriver();
		
		«series.core»
		
		driver.quit();
	«ENDIF»
    '''
    
    def core(Series series)'''
    «FOR Operation op : series.operations»
    		«op.action.writeOperation»
    «ENDFOR»
    '''
    
    def dispatch writeOperation(All allAction)'''
    '''
    
    def dispatch writeOperation(Browse browseAction)'''
    driver.get("«browseAction.url»");
    '''
    
    def dispatch writeOperation(Check checkAction)'''
    
    '''
    
    def dispatch writeOperation(Click clickAction)'''
    
    '''
    
    def dispatch writeOperation(Type typeAction)'''
    '''
    
    def dispatch writeOperation(VariableSet variableSetAction)'''
    '''
}