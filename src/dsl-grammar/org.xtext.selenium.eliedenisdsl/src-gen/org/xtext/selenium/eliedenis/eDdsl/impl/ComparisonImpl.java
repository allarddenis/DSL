/**
 * generated by Xtext 2.12.0
 */
package org.xtext.selenium.eliedenis.eDdsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.selenium.eliedenis.eDdsl.Comparison;
import org.xtext.selenium.eliedenis.eDdsl.ComparisonOperatorEnum;
import org.xtext.selenium.eliedenis.eDdsl.EDdslPackage;
import org.xtext.selenium.eliedenis.eDdsl.Val;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Comparison</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.selenium.eliedenis.eDdsl.impl.ComparisonImpl#getFirstVal <em>First Val</em>}</li>
 *   <li>{@link org.xtext.selenium.eliedenis.eDdsl.impl.ComparisonImpl#getComparatorOperator <em>Comparator Operator</em>}</li>
 *   <li>{@link org.xtext.selenium.eliedenis.eDdsl.impl.ComparisonImpl#getSecondVal <em>Second Val</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComparisonImpl extends ActionBoolReturnImpl implements Comparison
{
  /**
   * The cached value of the '{@link #getFirstVal() <em>First Val</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFirstVal()
   * @generated
   * @ordered
   */
  protected Val firstVal;

  /**
   * The default value of the '{@link #getComparatorOperator() <em>Comparator Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparatorOperator()
   * @generated
   * @ordered
   */
  protected static final ComparisonOperatorEnum COMPARATOR_OPERATOR_EDEFAULT = ComparisonOperatorEnum.EQUAL;

  /**
   * The cached value of the '{@link #getComparatorOperator() <em>Comparator Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparatorOperator()
   * @generated
   * @ordered
   */
  protected ComparisonOperatorEnum comparatorOperator = COMPARATOR_OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getSecondVal() <em>Second Val</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecondVal()
   * @generated
   * @ordered
   */
  protected Val secondVal;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComparisonImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EDdslPackage.Literals.COMPARISON;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Val getFirstVal()
  {
    return firstVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFirstVal(Val newFirstVal, NotificationChain msgs)
  {
    Val oldFirstVal = firstVal;
    firstVal = newFirstVal;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EDdslPackage.COMPARISON__FIRST_VAL, oldFirstVal, newFirstVal);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFirstVal(Val newFirstVal)
  {
    if (newFirstVal != firstVal)
    {
      NotificationChain msgs = null;
      if (firstVal != null)
        msgs = ((InternalEObject)firstVal).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EDdslPackage.COMPARISON__FIRST_VAL, null, msgs);
      if (newFirstVal != null)
        msgs = ((InternalEObject)newFirstVal).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EDdslPackage.COMPARISON__FIRST_VAL, null, msgs);
      msgs = basicSetFirstVal(newFirstVal, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EDdslPackage.COMPARISON__FIRST_VAL, newFirstVal, newFirstVal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComparisonOperatorEnum getComparatorOperator()
  {
    return comparatorOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setComparatorOperator(ComparisonOperatorEnum newComparatorOperator)
  {
    ComparisonOperatorEnum oldComparatorOperator = comparatorOperator;
    comparatorOperator = newComparatorOperator == null ? COMPARATOR_OPERATOR_EDEFAULT : newComparatorOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EDdslPackage.COMPARISON__COMPARATOR_OPERATOR, oldComparatorOperator, comparatorOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Val getSecondVal()
  {
    return secondVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSecondVal(Val newSecondVal, NotificationChain msgs)
  {
    Val oldSecondVal = secondVal;
    secondVal = newSecondVal;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EDdslPackage.COMPARISON__SECOND_VAL, oldSecondVal, newSecondVal);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSecondVal(Val newSecondVal)
  {
    if (newSecondVal != secondVal)
    {
      NotificationChain msgs = null;
      if (secondVal != null)
        msgs = ((InternalEObject)secondVal).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EDdslPackage.COMPARISON__SECOND_VAL, null, msgs);
      if (newSecondVal != null)
        msgs = ((InternalEObject)newSecondVal).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EDdslPackage.COMPARISON__SECOND_VAL, null, msgs);
      msgs = basicSetSecondVal(newSecondVal, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EDdslPackage.COMPARISON__SECOND_VAL, newSecondVal, newSecondVal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EDdslPackage.COMPARISON__FIRST_VAL:
        return basicSetFirstVal(null, msgs);
      case EDdslPackage.COMPARISON__SECOND_VAL:
        return basicSetSecondVal(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EDdslPackage.COMPARISON__FIRST_VAL:
        return getFirstVal();
      case EDdslPackage.COMPARISON__COMPARATOR_OPERATOR:
        return getComparatorOperator();
      case EDdslPackage.COMPARISON__SECOND_VAL:
        return getSecondVal();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EDdslPackage.COMPARISON__FIRST_VAL:
        setFirstVal((Val)newValue);
        return;
      case EDdslPackage.COMPARISON__COMPARATOR_OPERATOR:
        setComparatorOperator((ComparisonOperatorEnum)newValue);
        return;
      case EDdslPackage.COMPARISON__SECOND_VAL:
        setSecondVal((Val)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EDdslPackage.COMPARISON__FIRST_VAL:
        setFirstVal((Val)null);
        return;
      case EDdslPackage.COMPARISON__COMPARATOR_OPERATOR:
        setComparatorOperator(COMPARATOR_OPERATOR_EDEFAULT);
        return;
      case EDdslPackage.COMPARISON__SECOND_VAL:
        setSecondVal((Val)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EDdslPackage.COMPARISON__FIRST_VAL:
        return firstVal != null;
      case EDdslPackage.COMPARISON__COMPARATOR_OPERATOR:
        return comparatorOperator != COMPARATOR_OPERATOR_EDEFAULT;
      case EDdslPackage.COMPARISON__SECOND_VAL:
        return secondVal != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (comparatorOperator: ");
    result.append(comparatorOperator);
    result.append(')');
    return result.toString();
  }

} //ComparisonImpl
