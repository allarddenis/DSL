/*
 * generated by Xtext 2.12.0
 */
package org.xtext.selenium.eliedenis.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EDdslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Test");
		private final Assignment cTestsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTestsSeriesParserRuleCall_0 = (RuleCall)cTestsAssignment.eContents().get(0);
		
		//Test:
		//	tests=Series;
		@Override public ParserRule getRule() { return rule; }
		
		//tests=Series
		public Assignment getTestsAssignment() { return cTestsAssignment; }
		
		//Series
		public RuleCall getTestsSeriesParserRuleCall_0() { return cTestsSeriesParserRuleCall_0; }
	}
	public class ActionNoReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.ActionNoReturn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAllParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBrowseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCheckParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cClickParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVariableSetParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// ----- MODELS (ALPHABETICAL ORDER) -----
		//ActionNoReturn:
		//	All | Browse | Check | Click | Type | VariableSet;
		@Override public ParserRule getRule() { return rule; }
		
		//All | Browse | Check | Click | Type | VariableSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//All
		public RuleCall getAllParserRuleCall_0() { return cAllParserRuleCall_0; }
		
		//Browse
		public RuleCall getBrowseParserRuleCall_1() { return cBrowseParserRuleCall_1; }
		
		//Check
		public RuleCall getCheckParserRuleCall_2() { return cCheckParserRuleCall_2; }
		
		//Click
		public RuleCall getClickParserRuleCall_3() { return cClickParserRuleCall_3; }
		
		//Type
		public RuleCall getTypeParserRuleCall_4() { return cTypeParserRuleCall_4; }
		
		//VariableSet
		public RuleCall getVariableSetParserRuleCall_5() { return cVariableSetParserRuleCall_5; }
	}
	public class ActionReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.ActionReturn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCountParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReadParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ActionReturn:
		//	Count | Read;
		@Override public ParserRule getRule() { return rule; }
		
		//Count | Read
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Count
		public RuleCall getCountParserRuleCall_0() { return cCountParserRuleCall_0; }
		
		//Read
		public RuleCall getReadParserRuleCall_1() { return cReadParserRuleCall_1; }
	}
	public class ActionBoolReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.ActionBoolReturn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ActionBoolReturn:
		//	Comparison | Constraint;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison | Constraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//Constraint
		public RuleCall getConstraintParserRuleCall_1() { return cConstraintParserRuleCall_1; }
	}
	public class AllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.All");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperationActionNoReturnParserRuleCall_1_0 = (RuleCall)cOperationAssignment_1.eContents().get(0);
		
		//All:
		//	'all' operation=ActionNoReturn;
		@Override public ParserRule getRule() { return rule; }
		
		//'all' operation=ActionNoReturn
		public Group getGroup() { return cGroup; }
		
		//'all'
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }
		
		//operation=ActionNoReturn
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }
		
		//ActionNoReturn
		public RuleCall getOperationActionNoReturnParserRuleCall_1_0() { return cOperationActionNoReturnParserRuleCall_1_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cAttributeNameAssignment_1.eContents().get(0);
		private final Assignment cAttributeValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cAttributeValueAssignment_2.eContents().get(0);
		
		//Attribute:
		//	'attribute' attributeName=STRING attributeValue=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' attributeName=STRING attributeValue=STRING
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//attributeName=STRING
		public Assignment getAttributeNameAssignment_1() { return cAttributeNameAssignment_1; }
		
		//STRING
		public RuleCall getAttributeNameSTRINGTerminalRuleCall_1_0() { return cAttributeNameSTRINGTerminalRuleCall_1_0; }
		
		//attributeValue=STRING
		public Assignment getAttributeValueAssignment_2() { return cAttributeValueAssignment_2; }
		
		//STRING
		public RuleCall getAttributeValueSTRINGTerminalRuleCall_2_0() { return cAttributeValueSTRINGTerminalRuleCall_2_0; }
	}
	public class BrowseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Browse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBrowseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		//Browse:
		//	'browse' url=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'browse' url=STRING
		public Group getGroup() { return cGroup; }
		
		//'browse'
		public Keyword getBrowseKeyword_0() { return cBrowseKeyword_0; }
		
		//url=STRING
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_1_0() { return cUrlSTRINGTerminalRuleCall_1_0; }
	}
	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionActionBoolReturnParserRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		
		//Check:
		//	'check' action=ActionBoolReturn;
		@Override public ParserRule getRule() { return rule; }
		
		//'check' action=ActionBoolReturn
		public Group getGroup() { return cGroup; }
		
		//'check'
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }
		
		//action=ActionBoolReturn
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//ActionBoolReturn
		public RuleCall getActionActionBoolReturnParserRuleCall_1_0() { return cActionActionBoolReturnParserRuleCall_1_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComparisonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstValValParserRuleCall_1_0 = (RuleCall)cFirstValAssignment_1.eContents().get(0);
		private final Assignment cComparatorOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComparatorOperatorComparisonOperatorEnumEnumRuleCall_2_0 = (RuleCall)cComparatorOperatorAssignment_2.eContents().get(0);
		private final Assignment cSecondValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondValValParserRuleCall_3_0 = (RuleCall)cSecondValAssignment_3.eContents().get(0);
		
		//Comparison:
		//	'comparison' firstVal=Val comparatorOperator=ComparisonOperatorEnum secondVal=Val;
		@Override public ParserRule getRule() { return rule; }
		
		//'comparison' firstVal=Val comparatorOperator=ComparisonOperatorEnum secondVal=Val
		public Group getGroup() { return cGroup; }
		
		//'comparison'
		public Keyword getComparisonKeyword_0() { return cComparisonKeyword_0; }
		
		//firstVal=Val
		public Assignment getFirstValAssignment_1() { return cFirstValAssignment_1; }
		
		//Val
		public RuleCall getFirstValValParserRuleCall_1_0() { return cFirstValValParserRuleCall_1_0; }
		
		//comparatorOperator=ComparisonOperatorEnum
		public Assignment getComparatorOperatorAssignment_2() { return cComparatorOperatorAssignment_2; }
		
		//ComparisonOperatorEnum
		public RuleCall getComparatorOperatorComparisonOperatorEnumEnumRuleCall_2_0() { return cComparatorOperatorComparisonOperatorEnumEnumRuleCall_2_0; }
		
		//secondVal=Val
		public Assignment getSecondValAssignment_3() { return cSecondValAssignment_3; }
		
		//Val
		public RuleCall getSecondValValParserRuleCall_3_0() { return cSecondValValParserRuleCall_3_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReadableElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReadableElementReadableEnumEnumRuleCall_0_0 = (RuleCall)cReadableElementAssignment_0.eContents().get(0);
		private final Assignment cConstraintTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintTypeConstraintTypeEnumEnumRuleCall_1_0 = (RuleCall)cConstraintTypeAssignment_1.eContents().get(0);
		private final Assignment cExpectedValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpectedValValParserRuleCall_2_0 = (RuleCall)cExpectedValAssignment_2.eContents().get(0);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParametersParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		
		//Constraint:
		//	readableElement=ReadableEnum constraintType=ConstraintTypeEnum expectedVal=Val parameters=Parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//readableElement=ReadableEnum constraintType=ConstraintTypeEnum expectedVal=Val parameters=Parameters
		public Group getGroup() { return cGroup; }
		
		//readableElement=ReadableEnum
		public Assignment getReadableElementAssignment_0() { return cReadableElementAssignment_0; }
		
		//ReadableEnum
		public RuleCall getReadableElementReadableEnumEnumRuleCall_0_0() { return cReadableElementReadableEnumEnumRuleCall_0_0; }
		
		//constraintType=ConstraintTypeEnum
		public Assignment getConstraintTypeAssignment_1() { return cConstraintTypeAssignment_1; }
		
		//ConstraintTypeEnum
		public RuleCall getConstraintTypeConstraintTypeEnumEnumRuleCall_1_0() { return cConstraintTypeConstraintTypeEnumEnumRuleCall_1_0; }
		
		//expectedVal=Val
		public Assignment getExpectedValAssignment_2() { return cExpectedValAssignment_2; }
		
		//Val
		public RuleCall getExpectedValValParserRuleCall_2_0() { return cExpectedValValParserRuleCall_2_0; }
		
		//parameters=Parameters
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_3_0() { return cParametersParametersParserRuleCall_3_0; }
	}
	public class CountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Count");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cParametersAlternatives_1_0 = (Alternatives)cParametersAssignment_1.eContents().get(0);
		private final RuleCall cParametersParametersParserRuleCall_1_0_0 = (RuleCall)cParametersAlternatives_1_0.eContents().get(0);
		private final RuleCall cParametersActionReturnParserRuleCall_1_0_1 = (RuleCall)cParametersAlternatives_1_0.eContents().get(1);
		
		//Count:
		//	'count' parameters=(Parameters | ActionReturn);
		@Override public ParserRule getRule() { return rule; }
		
		//'count' parameters=(Parameters | ActionReturn)
		public Group getGroup() { return cGroup; }
		
		//'count'
		public Keyword getCountKeyword_0() { return cCountKeyword_0; }
		
		//parameters=(Parameters | ActionReturn)
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }
		
		//(Parameters | ActionReturn)
		public Alternatives getParametersAlternatives_1_0() { return cParametersAlternatives_1_0; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_1_0_0() { return cParametersParametersParserRuleCall_1_0_0; }
		
		//ActionReturn
		public RuleCall getParametersActionReturnParserRuleCall_1_0_1() { return cParametersActionReturnParserRuleCall_1_0_1; }
	}
	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClickableElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClickableElementClickableEnumEnumRuleCall_1_0 = (RuleCall)cClickableElementAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParametersParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		
		//Click:
		//	'click' clickableElement=ClickableEnum parameters=Parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//'click' clickableElement=ClickableEnum parameters=Parameters
		public Group getGroup() { return cGroup; }
		
		//'click'
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }
		
		//clickableElement=ClickableEnum
		public Assignment getClickableElementAssignment_1() { return cClickableElementAssignment_1; }
		
		//ClickableEnum
		public RuleCall getClickableElementClickableEnumEnumRuleCall_1_0() { return cClickableElementClickableEnumEnumRuleCall_1_0; }
		
		//parameters=Parameters
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_2_0() { return cParametersParametersParserRuleCall_2_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionActionNoReturnParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Operation:
		//	action=ActionNoReturn ';';
		@Override public ParserRule getRule() { return rule; }
		
		//action=ActionNoReturn ';'
		public Group getGroup() { return cGroup; }
		
		//action=ActionNoReturn
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//ActionNoReturn
		public RuleCall getActionActionNoReturnParserRuleCall_0_0() { return cActionActionNoReturnParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cParameterAlternatives_1_0 = (Alternatives)cParameterAssignment_1.eContents().get(0);
		private final RuleCall cParameterAttributeParserRuleCall_1_0_0 = (RuleCall)cParameterAlternatives_1_0.eContents().get(0);
		private final RuleCall cParameterValueParserRuleCall_1_0_1 = (RuleCall)cParameterAlternatives_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parameter:
		//	'(' parameter=(Attribute | Value) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' parameter=(Attribute | Value) ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//parameter=(Attribute | Value)
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }
		
		//(Attribute | Value)
		public Alternatives getParameterAlternatives_1_0() { return cParameterAlternatives_1_0; }
		
		//Attribute
		public RuleCall getParameterAttributeParserRuleCall_1_0_0() { return cParameterAttributeParserRuleCall_1_0_0; }
		
		//Value
		public RuleCall getParameterValueParserRuleCall_1_0_1() { return cParameterValueParserRuleCall_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Parameters");
		private final Assignment cParametersAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_0 = (RuleCall)cParametersAssignment.eContents().get(0);
		
		//Parameters:
		//	parameters+=Parameter*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=Parameter*
		public Assignment getParametersAssignment() { return cParametersAssignment; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_0() { return cParametersParameterParserRuleCall_0; }
	}
	public class ReadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Read");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReadableElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReadableElementReadableEnumEnumRuleCall_1_0 = (RuleCall)cReadableElementAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParametersParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		
		//Read:
		//	'read' readableElement=ReadableEnum parameters=Parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' readableElement=ReadableEnum parameters=Parameters
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//readableElement=ReadableEnum
		public Assignment getReadableElementAssignment_1() { return cReadableElementAssignment_1; }
		
		//ReadableEnum
		public RuleCall getReadableElementReadableEnumEnumRuleCall_1_0() { return cReadableElementReadableEnumEnumRuleCall_1_0; }
		
		//parameters=Parameters
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_2_0() { return cParametersParametersParserRuleCall_2_0; }
	}
	public class SeriesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Series");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBrowserAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBrowserBrowserEnumEnumRuleCall_1_0 = (RuleCall)cBrowserAssignment_1.eContents().get(0);
		private final Assignment cExpectedReturnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpectedReturnBoolEnumEnumRuleCall_2_0 = (RuleCall)cExpectedReturnAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationsOperationParserRuleCall_4_0 = (RuleCall)cOperationsAssignment_4.eContents().get(0);
		
		//Series:
		//	'open' browser=BrowserEnum expectedReturn=BoolEnum ';' operations+=Operation*;
		@Override public ParserRule getRule() { return rule; }
		
		//'open' browser=BrowserEnum expectedReturn=BoolEnum ';' operations+=Operation*
		public Group getGroup() { return cGroup; }
		
		//'open'
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }
		
		//browser=BrowserEnum
		public Assignment getBrowserAssignment_1() { return cBrowserAssignment_1; }
		
		//BrowserEnum
		public RuleCall getBrowserBrowserEnumEnumRuleCall_1_0() { return cBrowserBrowserEnumEnumRuleCall_1_0; }
		
		//expectedReturn=BoolEnum
		public Assignment getExpectedReturnAssignment_2() { return cExpectedReturnAssignment_2; }
		
		//BoolEnum
		public RuleCall getExpectedReturnBoolEnumEnumRuleCall_2_0() { return cExpectedReturnBoolEnumEnumRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//operations+=Operation*
		public Assignment getOperationsAssignment_4() { return cOperationsAssignment_4; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_4_0() { return cOperationsOperationParserRuleCall_4_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextToTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextToTypeValParserRuleCall_1_0 = (RuleCall)cTextToTypeAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParametersParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		
		//Type:
		//	'type' textToType=Val parameters=Parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' textToType=Val parameters=Parameters
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//textToType=Val
		public Assignment getTextToTypeAssignment_1() { return cTextToTypeAssignment_1; }
		
		//Val
		public RuleCall getTextToTypeValParserRuleCall_1_0() { return cTextToTypeValParserRuleCall_1_0; }
		
		//parameters=Parameters
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_2_0() { return cParametersParametersParserRuleCall_2_0; }
	}
	public class ValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Val");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableGetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Assignment cBoolAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBoolBoolEnumEnumRuleCall_2_0 = (RuleCall)cBoolAssignment_2.eContents().get(0);
		
		//Val:
		//	VariableGet | STRING | bool=BoolEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableGet | STRING | bool=BoolEnum
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableGet
		public RuleCall getVariableGetParserRuleCall_0() { return cVariableGetParserRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//bool=BoolEnum
		public Assignment getBoolAssignment_2() { return cBoolAssignment_2; }
		
		//BoolEnum
		public RuleCall getBoolBoolEnumEnumRuleCall_2_0() { return cBoolBoolEnumEnumRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Value:
		//	'value' value=Val;
		@Override public ParserRule getRule() { return rule; }
		
		//'value' value=Val
		public Group getGroup() { return cGroup; }
		
		//'value'
		public Keyword getValueKeyword_0() { return cValueKeyword_0; }
		
		//value=Val
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Val
		public RuleCall getValueValParserRuleCall_1_0() { return cValueValParserRuleCall_1_0; }
	}
	public class VariableGetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.VariableGet");
		private final Assignment cVarNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_0 = (RuleCall)cVarNameAssignment.eContents().get(0);
		
		//VariableGet:
		//	varName=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//varName=ID
		public Assignment getVarNameAssignment() { return cVarNameAssignment; }
		
		//ID
		public RuleCall getVarNameIDTerminalRuleCall_0() { return cVarNameIDTerminalRuleCall_0; }
	}
	public class VariableSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.VariableSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameIDTerminalRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionActionReturnParserRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		
		//VariableSet:
		//	varName=ID '=' action=ActionReturn;
		@Override public ParserRule getRule() { return rule; }
		
		//varName=ID '=' action=ActionReturn
		public Group getGroup() { return cGroup; }
		
		//varName=ID
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }
		
		//ID
		public RuleCall getVarNameIDTerminalRuleCall_0_0() { return cVarNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//action=ActionReturn
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }
		
		//ActionReturn
		public RuleCall getActionActionReturnParserRuleCall_2_0() { return cActionActionReturnParserRuleCall_2_0; }
	}
	
	public class BoolEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.BoolEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTrueTrueKeyword_0_0 = (Keyword)cTrueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFalseFalseKeyword_1_0 = (Keyword)cFalseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BoolEnum:
		//	True='true' | False='false';
		public EnumRule getRule() { return rule; }
		
		//True='true' | False='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//True='true'
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_0() { return cTrueEnumLiteralDeclaration_0; }
		
		//'true'
		public Keyword getTrueTrueKeyword_0_0() { return cTrueTrueKeyword_0_0; }
		
		//False='false'
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_1() { return cFalseEnumLiteralDeclaration_1; }
		
		//'false'
		public Keyword getFalseFalseKeyword_1_0() { return cFalseFalseKeyword_1_0; }
	}
	public class BrowserEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.BrowserEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFirefoxEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFirefoxFirefoxKeyword_0_0 = (Keyword)cFirefoxEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIEIeKeyword_1_0 = (Keyword)cIEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BrowserEnum:
		//	Firefox='firefox' | IE='ie';
		public EnumRule getRule() { return rule; }
		
		//Firefox='firefox' | IE='ie'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Firefox='firefox'
		public EnumLiteralDeclaration getFirefoxEnumLiteralDeclaration_0() { return cFirefoxEnumLiteralDeclaration_0; }
		
		//'firefox'
		public Keyword getFirefoxFirefoxKeyword_0_0() { return cFirefoxFirefoxKeyword_0_0; }
		
		//IE='ie'
		public EnumLiteralDeclaration getIEEnumLiteralDeclaration_1() { return cIEEnumLiteralDeclaration_1; }
		
		//'ie'
		public Keyword getIEIeKeyword_1_0() { return cIEIeKeyword_1_0; }
	}
	public class ClickableEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.ClickableEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cButtonEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cButtonButtonKeyword_0_0 = (Keyword)cButtonEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLinkEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLinkLinkKeyword_1_0 = (Keyword)cLinkEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInputEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInputInputKeyword_2_0 = (Keyword)cInputEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ClickableEnum:
		//	Button='button' | Link='link' | Input='input';
		public EnumRule getRule() { return rule; }
		
		//Button='button' | Link='link' | Input='input'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Button='button'
		public EnumLiteralDeclaration getButtonEnumLiteralDeclaration_0() { return cButtonEnumLiteralDeclaration_0; }
		
		//'button'
		public Keyword getButtonButtonKeyword_0_0() { return cButtonButtonKeyword_0_0; }
		
		//Link='link'
		public EnumLiteralDeclaration getLinkEnumLiteralDeclaration_1() { return cLinkEnumLiteralDeclaration_1; }
		
		//'link'
		public Keyword getLinkLinkKeyword_1_0() { return cLinkLinkKeyword_1_0; }
		
		//Input='input'
		public EnumLiteralDeclaration getInputEnumLiteralDeclaration_2() { return cInputEnumLiteralDeclaration_2; }
		
		//'input'
		public Keyword getInputInputKeyword_2_0() { return cInputInputKeyword_2_0; }
	}
	public class ComparisonOperatorEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.ComparisonOperatorEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSuperiorEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSuperiorGreaterThanSignKeyword_1_0 = (Keyword)cSuperiorEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInferiorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInferiorLessThanSignKeyword_2_0 = (Keyword)cInferiorEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSupEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSupEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cSupEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cInfEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cInfEqualLessThanSignEqualsSignKeyword_4_0 = (Keyword)cInfEqualEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ComparisonOperatorEnum:
		//	Equal='==' | Superior='>' | Inferior='<' | SupEqual='>=' | InfEqual='<=';
		public EnumRule getRule() { return rule; }
		
		//Equal='==' | Superior='>' | Inferior='<' | SupEqual='>=' | InfEqual='<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Equal='=='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEqualEqualsSignEqualsSignKeyword_0_0() { return cEqualEqualsSignEqualsSignKeyword_0_0; }
		
		//Superior='>'
		public EnumLiteralDeclaration getSuperiorEnumLiteralDeclaration_1() { return cSuperiorEnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getSuperiorGreaterThanSignKeyword_1_0() { return cSuperiorGreaterThanSignKeyword_1_0; }
		
		//Inferior='<'
		public EnumLiteralDeclaration getInferiorEnumLiteralDeclaration_2() { return cInferiorEnumLiteralDeclaration_2; }
		
		//'<'
		public Keyword getInferiorLessThanSignKeyword_2_0() { return cInferiorLessThanSignKeyword_2_0; }
		
		//SupEqual='>='
		public EnumLiteralDeclaration getSupEqualEnumLiteralDeclaration_3() { return cSupEqualEnumLiteralDeclaration_3; }
		
		//'>='
		public Keyword getSupEqualGreaterThanSignEqualsSignKeyword_3_0() { return cSupEqualGreaterThanSignEqualsSignKeyword_3_0; }
		
		//InfEqual='<='
		public EnumLiteralDeclaration getInfEqualEnumLiteralDeclaration_4() { return cInfEqualEnumLiteralDeclaration_4; }
		
		//'<='
		public Keyword getInfEqualLessThanSignEqualsSignKeyword_4_0() { return cInfEqualLessThanSignEqualsSignKeyword_4_0; }
	}
	public class ConstraintTypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.ConstraintTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cContainEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cContainContainKeyword_0_0 = (Keyword)cContainEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEnabledEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEnabledEnabledKeyword_1_0 = (Keyword)cEnabledEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ConstraintTypeEnum:
		//	Contain='contain' | Enabled='enabled';
		public EnumRule getRule() { return rule; }
		
		//Contain='contain' | Enabled='enabled'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Contain='contain'
		public EnumLiteralDeclaration getContainEnumLiteralDeclaration_0() { return cContainEnumLiteralDeclaration_0; }
		
		//'contain'
		public Keyword getContainContainKeyword_0_0() { return cContainContainKeyword_0_0; }
		
		//Enabled='enabled'
		public EnumLiteralDeclaration getEnabledEnumLiteralDeclaration_1() { return cEnabledEnumLiteralDeclaration_1; }
		
		//'enabled'
		public Keyword getEnabledEnabledKeyword_1_0() { return cEnabledEnabledKeyword_1_0; }
	}
	public class ReadableEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.selenium.eliedenis.EDdsl.ReadableEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cButtonEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cButtonButtonKeyword_0_0 = (Keyword)cButtonEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLinkEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLinkLinkKeyword_1_0 = (Keyword)cLinkEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInputEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInputInputKeyword_2_0 = (Keyword)cInputEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cH1EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cH1H1Keyword_3_0 = (Keyword)cH1EnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ReadableEnum:
		//	Button='button' | Link='link' | Input='input' | H1='h1';
		public EnumRule getRule() { return rule; }
		
		//Button='button' | Link='link' | Input='input' | H1='h1'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Button='button'
		public EnumLiteralDeclaration getButtonEnumLiteralDeclaration_0() { return cButtonEnumLiteralDeclaration_0; }
		
		//'button'
		public Keyword getButtonButtonKeyword_0_0() { return cButtonButtonKeyword_0_0; }
		
		//Link='link'
		public EnumLiteralDeclaration getLinkEnumLiteralDeclaration_1() { return cLinkEnumLiteralDeclaration_1; }
		
		//'link'
		public Keyword getLinkLinkKeyword_1_0() { return cLinkLinkKeyword_1_0; }
		
		//Input='input'
		public EnumLiteralDeclaration getInputEnumLiteralDeclaration_2() { return cInputEnumLiteralDeclaration_2; }
		
		//'input'
		public Keyword getInputInputKeyword_2_0() { return cInputInputKeyword_2_0; }
		
		//H1='h1'
		public EnumLiteralDeclaration getH1EnumLiteralDeclaration_3() { return cH1EnumLiteralDeclaration_3; }
		
		//'h1'
		public Keyword getH1H1Keyword_3_0() { return cH1H1Keyword_3_0; }
	}
	
	private final TestElements pTest;
	private final ActionNoReturnElements pActionNoReturn;
	private final ActionReturnElements pActionReturn;
	private final ActionBoolReturnElements pActionBoolReturn;
	private final AllElements pAll;
	private final AttributeElements pAttribute;
	private final BrowseElements pBrowse;
	private final CheckElements pCheck;
	private final ComparisonElements pComparison;
	private final ConstraintElements pConstraint;
	private final CountElements pCount;
	private final ClickElements pClick;
	private final OperationElements pOperation;
	private final ParameterElements pParameter;
	private final ParametersElements pParameters;
	private final ReadElements pRead;
	private final SeriesElements pSeries;
	private final TypeElements pType;
	private final ValElements pVal;
	private final ValueElements pValue;
	private final VariableGetElements pVariableGet;
	private final VariableSetElements pVariableSet;
	private final BoolEnumElements eBoolEnum;
	private final BrowserEnumElements eBrowserEnum;
	private final ClickableEnumElements eClickableEnum;
	private final ComparisonOperatorEnumElements eComparisonOperatorEnum;
	private final ConstraintTypeEnumElements eConstraintTypeEnum;
	private final ReadableEnumElements eReadableEnum;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EDdslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTest = new TestElements();
		this.pActionNoReturn = new ActionNoReturnElements();
		this.pActionReturn = new ActionReturnElements();
		this.pActionBoolReturn = new ActionBoolReturnElements();
		this.pAll = new AllElements();
		this.pAttribute = new AttributeElements();
		this.pBrowse = new BrowseElements();
		this.pCheck = new CheckElements();
		this.pComparison = new ComparisonElements();
		this.pConstraint = new ConstraintElements();
		this.pCount = new CountElements();
		this.pClick = new ClickElements();
		this.pOperation = new OperationElements();
		this.pParameter = new ParameterElements();
		this.pParameters = new ParametersElements();
		this.pRead = new ReadElements();
		this.pSeries = new SeriesElements();
		this.pType = new TypeElements();
		this.pVal = new ValElements();
		this.pValue = new ValueElements();
		this.pVariableGet = new VariableGetElements();
		this.pVariableSet = new VariableSetElements();
		this.eBoolEnum = new BoolEnumElements();
		this.eBrowserEnum = new BrowserEnumElements();
		this.eClickableEnum = new ClickableEnumElements();
		this.eComparisonOperatorEnum = new ComparisonOperatorEnumElements();
		this.eConstraintTypeEnum = new ConstraintTypeEnumElements();
		this.eReadableEnum = new ReadableEnumElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.selenium.eliedenis.EDdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Test:
	//	tests=Series;
	public TestElements getTestAccess() {
		return pTest;
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}
	
	//// ----- MODELS (ALPHABETICAL ORDER) -----
	//ActionNoReturn:
	//	All | Browse | Check | Click | Type | VariableSet;
	public ActionNoReturnElements getActionNoReturnAccess() {
		return pActionNoReturn;
	}
	
	public ParserRule getActionNoReturnRule() {
		return getActionNoReturnAccess().getRule();
	}
	
	//ActionReturn:
	//	Count | Read;
	public ActionReturnElements getActionReturnAccess() {
		return pActionReturn;
	}
	
	public ParserRule getActionReturnRule() {
		return getActionReturnAccess().getRule();
	}
	
	//ActionBoolReturn:
	//	Comparison | Constraint;
	public ActionBoolReturnElements getActionBoolReturnAccess() {
		return pActionBoolReturn;
	}
	
	public ParserRule getActionBoolReturnRule() {
		return getActionBoolReturnAccess().getRule();
	}
	
	//All:
	//	'all' operation=ActionNoReturn;
	public AllElements getAllAccess() {
		return pAll;
	}
	
	public ParserRule getAllRule() {
		return getAllAccess().getRule();
	}
	
	//Attribute:
	//	'attribute' attributeName=STRING attributeValue=STRING;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Browse:
	//	'browse' url=STRING;
	public BrowseElements getBrowseAccess() {
		return pBrowse;
	}
	
	public ParserRule getBrowseRule() {
		return getBrowseAccess().getRule();
	}
	
	//Check:
	//	'check' action=ActionBoolReturn;
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}
	
	//Comparison:
	//	'comparison' firstVal=Val comparatorOperator=ComparisonOperatorEnum secondVal=Val;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Constraint:
	//	readableElement=ReadableEnum constraintType=ConstraintTypeEnum expectedVal=Val parameters=Parameters;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Count:
	//	'count' parameters=(Parameters | ActionReturn);
	public CountElements getCountAccess() {
		return pCount;
	}
	
	public ParserRule getCountRule() {
		return getCountAccess().getRule();
	}
	
	//Click:
	//	'click' clickableElement=ClickableEnum parameters=Parameters;
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}
	
	//Operation:
	//	action=ActionNoReturn ';';
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Parameter:
	//	'(' parameter=(Attribute | Value) ')';
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Parameters:
	//	parameters+=Parameter*;
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//Read:
	//	'read' readableElement=ReadableEnum parameters=Parameters;
	public ReadElements getReadAccess() {
		return pRead;
	}
	
	public ParserRule getReadRule() {
		return getReadAccess().getRule();
	}
	
	//Series:
	//	'open' browser=BrowserEnum expectedReturn=BoolEnum ';' operations+=Operation*;
	public SeriesElements getSeriesAccess() {
		return pSeries;
	}
	
	public ParserRule getSeriesRule() {
		return getSeriesAccess().getRule();
	}
	
	//Type:
	//	'type' textToType=Val parameters=Parameters;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Val:
	//	VariableGet | STRING | bool=BoolEnum;
	public ValElements getValAccess() {
		return pVal;
	}
	
	public ParserRule getValRule() {
		return getValAccess().getRule();
	}
	
	//Value:
	//	'value' value=Val;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//VariableGet:
	//	varName=ID;
	public VariableGetElements getVariableGetAccess() {
		return pVariableGet;
	}
	
	public ParserRule getVariableGetRule() {
		return getVariableGetAccess().getRule();
	}
	
	//VariableSet:
	//	varName=ID '=' action=ActionReturn;
	public VariableSetElements getVariableSetAccess() {
		return pVariableSet;
	}
	
	public ParserRule getVariableSetRule() {
		return getVariableSetAccess().getRule();
	}
	
	//enum BoolEnum:
	//	True='true' | False='false';
	public BoolEnumElements getBoolEnumAccess() {
		return eBoolEnum;
	}
	
	public EnumRule getBoolEnumRule() {
		return getBoolEnumAccess().getRule();
	}
	
	//enum BrowserEnum:
	//	Firefox='firefox' | IE='ie';
	public BrowserEnumElements getBrowserEnumAccess() {
		return eBrowserEnum;
	}
	
	public EnumRule getBrowserEnumRule() {
		return getBrowserEnumAccess().getRule();
	}
	
	//enum ClickableEnum:
	//	Button='button' | Link='link' | Input='input';
	public ClickableEnumElements getClickableEnumAccess() {
		return eClickableEnum;
	}
	
	public EnumRule getClickableEnumRule() {
		return getClickableEnumAccess().getRule();
	}
	
	//enum ComparisonOperatorEnum:
	//	Equal='==' | Superior='>' | Inferior='<' | SupEqual='>=' | InfEqual='<=';
	public ComparisonOperatorEnumElements getComparisonOperatorEnumAccess() {
		return eComparisonOperatorEnum;
	}
	
	public EnumRule getComparisonOperatorEnumRule() {
		return getComparisonOperatorEnumAccess().getRule();
	}
	
	//enum ConstraintTypeEnum:
	//	Contain='contain' | Enabled='enabled';
	public ConstraintTypeEnumElements getConstraintTypeEnumAccess() {
		return eConstraintTypeEnum;
	}
	
	public EnumRule getConstraintTypeEnumRule() {
		return getConstraintTypeEnumAccess().getRule();
	}
	
	//enum ReadableEnum:
	//	Button='button' | Link='link' | Input='input' | H1='h1';
	public ReadableEnumElements getReadableEnumAccess() {
		return eReadableEnum;
	}
	
	public EnumRule getReadableEnumRule() {
		return getReadableEnumAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
