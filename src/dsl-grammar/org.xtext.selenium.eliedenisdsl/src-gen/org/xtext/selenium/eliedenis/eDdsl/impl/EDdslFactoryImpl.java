/**
 * generated by Xtext 2.12.0
 */
package org.xtext.selenium.eliedenis.eDdsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.selenium.eliedenis.eDdsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class EDdslFactoryImpl extends EFactoryImpl implements EDdslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static EDdslFactory init()
  {
    try
    {
      EDdslFactory theEDdslFactory = (EDdslFactory)EPackage.Registry.INSTANCE.getEFactory(EDdslPackage.eNS_URI);
      if (theEDdslFactory != null)
      {
        return theEDdslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new EDdslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EDdslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case EDdslPackage.MODEL: return createModel();
      case EDdslPackage.ACTION_NO_RETURN: return createActionNoReturn();
      case EDdslPackage.ACTION_RETURN: return createActionReturn();
      case EDdslPackage.ACTION_BOOL_RETURN: return createActionBoolReturn();
      case EDdslPackage.ALL: return createAll();
      case EDdslPackage.ATTRIBUTE: return createAttribute();
      case EDdslPackage.BROWSE: return createBrowse();
      case EDdslPackage.CHECK: return createCheck();
      case EDdslPackage.COMPARISON: return createComparison();
      case EDdslPackage.CONSTRAINT: return createConstraint();
      case EDdslPackage.COUNT: return createCount();
      case EDdslPackage.CLICK: return createClick();
      case EDdslPackage.OPERATION: return createOperation();
      case EDdslPackage.PARAMETER: return createParameter();
      case EDdslPackage.PARAMETERS: return createParameters();
      case EDdslPackage.READ: return createRead();
      case EDdslPackage.SERIES: return createSeries();
      case EDdslPackage.TYPE: return createType();
      case EDdslPackage.VAL: return createVal();
      case EDdslPackage.VALUE: return createValue();
      case EDdslPackage.VARIABLE_GET: return createVariableGet();
      case EDdslPackage.VARIABLE_SET: return createVariableSet();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case EDdslPackage.BOOL_ENUM:
        return createBoolEnumFromString(eDataType, initialValue);
      case EDdslPackage.BROWSER_ENUM:
        return createBrowserEnumFromString(eDataType, initialValue);
      case EDdslPackage.CLICKABLE_ENUM:
        return createClickableEnumFromString(eDataType, initialValue);
      case EDdslPackage.COMPARISON_OPERATOR_ENUM:
        return createComparisonOperatorEnumFromString(eDataType, initialValue);
      case EDdslPackage.CONSTRAINT_TYPE_ENUM:
        return createConstraintTypeEnumFromString(eDataType, initialValue);
      case EDdslPackage.READABLE_ENUM:
        return createReadableEnumFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case EDdslPackage.BOOL_ENUM:
        return convertBoolEnumToString(eDataType, instanceValue);
      case EDdslPackage.BROWSER_ENUM:
        return convertBrowserEnumToString(eDataType, instanceValue);
      case EDdslPackage.CLICKABLE_ENUM:
        return convertClickableEnumToString(eDataType, instanceValue);
      case EDdslPackage.COMPARISON_OPERATOR_ENUM:
        return convertComparisonOperatorEnumToString(eDataType, instanceValue);
      case EDdslPackage.CONSTRAINT_TYPE_ENUM:
        return convertConstraintTypeEnumToString(eDataType, instanceValue);
      case EDdslPackage.READABLE_ENUM:
        return convertReadableEnumToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActionNoReturn createActionNoReturn()
  {
    ActionNoReturnImpl actionNoReturn = new ActionNoReturnImpl();
    return actionNoReturn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActionReturn createActionReturn()
  {
    ActionReturnImpl actionReturn = new ActionReturnImpl();
    return actionReturn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActionBoolReturn createActionBoolReturn()
  {
    ActionBoolReturnImpl actionBoolReturn = new ActionBoolReturnImpl();
    return actionBoolReturn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public All createAll()
  {
    AllImpl all = new AllImpl();
    return all;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Browse createBrowse()
  {
    BrowseImpl browse = new BrowseImpl();
    return browse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Check createCheck()
  {
    CheckImpl check = new CheckImpl();
    return check;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Comparison createComparison()
  {
    ComparisonImpl comparison = new ComparisonImpl();
    return comparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Count createCount()
  {
    CountImpl count = new CountImpl();
    return count;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Click createClick()
  {
    ClickImpl click = new ClickImpl();
    return click;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parameters createParameters()
  {
    ParametersImpl parameters = new ParametersImpl();
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Read createRead()
  {
    ReadImpl read = new ReadImpl();
    return read;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Series createSeries()
  {
    SeriesImpl series = new SeriesImpl();
    return series;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Val createVal()
  {
    ValImpl val = new ValImpl();
    return val;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableGet createVariableGet()
  {
    VariableGetImpl variableGet = new VariableGetImpl();
    return variableGet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableSet createVariableSet()
  {
    VariableSetImpl variableSet = new VariableSetImpl();
    return variableSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolEnum createBoolEnumFromString(EDataType eDataType, String initialValue)
  {
    BoolEnum result = BoolEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBoolEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BrowserEnum createBrowserEnumFromString(EDataType eDataType, String initialValue)
  {
    BrowserEnum result = BrowserEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBrowserEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClickableEnum createClickableEnumFromString(EDataType eDataType, String initialValue)
  {
    ClickableEnum result = ClickableEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertClickableEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComparisonOperatorEnum createComparisonOperatorEnumFromString(EDataType eDataType, String initialValue)
  {
    ComparisonOperatorEnum result = ComparisonOperatorEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertComparisonOperatorEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstraintTypeEnum createConstraintTypeEnumFromString(EDataType eDataType, String initialValue)
  {
    ConstraintTypeEnum result = ConstraintTypeEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertConstraintTypeEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReadableEnum createReadableEnumFromString(EDataType eDataType, String initialValue)
  {
    ReadableEnum result = ReadableEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertReadableEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EDdslPackage getEDdslPackage()
  {
    return (EDdslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static EDdslPackage getPackage()
  {
    return EDdslPackage.eINSTANCE;
  }

} //EDdslFactoryImpl
