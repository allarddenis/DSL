/*
 * generated by Xtext 2.12.0
 */
grammar InternalEDdsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.selenium.eliedenis.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.selenium.eliedenis.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.selenium.eliedenis.services.EDdslGrammarAccess;

}
@parser::members {
	private EDdslGrammarAccess grammarAccess;

	public void setGrammarAccess(EDdslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getModelAssignment()); }
		(rule__Model__ModelAssignment)
		{ after(grammarAccess.getModelAccess().getModelAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionNoReturn
entryRuleActionNoReturn
:
{ before(grammarAccess.getActionNoReturnRule()); }
	 ruleActionNoReturn
{ after(grammarAccess.getActionNoReturnRule()); } 
	 EOF 
;

// Rule ActionNoReturn
ruleActionNoReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionNoReturnAccess().getActionAssignment()); }
		(rule__ActionNoReturn__ActionAssignment)
		{ after(grammarAccess.getActionNoReturnAccess().getActionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionReturn
entryRuleActionReturn
:
{ before(grammarAccess.getActionReturnRule()); }
	 ruleActionReturn
{ after(grammarAccess.getActionReturnRule()); } 
	 EOF 
;

// Rule ActionReturn
ruleActionReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionReturnAccess().getActionAssignment()); }
		(rule__ActionReturn__ActionAssignment)
		{ after(grammarAccess.getActionReturnAccess().getActionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionBoolReturn
entryRuleActionBoolReturn
:
{ before(grammarAccess.getActionBoolReturnRule()); }
	 ruleActionBoolReturn
{ after(grammarAccess.getActionBoolReturnRule()); } 
	 EOF 
;

// Rule ActionBoolReturn
ruleActionBoolReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionBoolReturnAccess().getAlternatives()); }
		(rule__ActionBoolReturn__Alternatives)
		{ after(grammarAccess.getActionBoolReturnAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAll
entryRuleAll
:
{ before(grammarAccess.getAllRule()); }
	 ruleAll
{ after(grammarAccess.getAllRule()); } 
	 EOF 
;

// Rule All
ruleAll 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAllAccess().getGroup()); }
		(rule__All__Group__0)
		{ after(grammarAccess.getAllAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBrowse
entryRuleBrowse
:
{ before(grammarAccess.getBrowseRule()); }
	 ruleBrowse
{ after(grammarAccess.getBrowseRule()); } 
	 EOF 
;

// Rule Browse
ruleBrowse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBrowseAccess().getGroup()); }
		(rule__Browse__Group__0)
		{ after(grammarAccess.getBrowseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCheck
entryRuleCheck
:
{ before(grammarAccess.getCheckRule()); }
	 ruleCheck
{ after(grammarAccess.getCheckRule()); } 
	 EOF 
;

// Rule Check
ruleCheck 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCheckAccess().getGroup()); }
		(rule__Check__Group__0)
		{ after(grammarAccess.getCheckAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getGroup()); }
		(rule__Constraint__Group__0)
		{ after(grammarAccess.getConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCount
entryRuleCount
:
{ before(grammarAccess.getCountRule()); }
	 ruleCount
{ after(grammarAccess.getCountRule()); } 
	 EOF 
;

// Rule Count
ruleCount 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCountAccess().getGroup()); }
		(rule__Count__Group__0)
		{ after(grammarAccess.getCountAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClick
entryRuleClick
:
{ before(grammarAccess.getClickRule()); }
	 ruleClick
{ after(grammarAccess.getClickRule()); } 
	 EOF 
;

// Rule Click
ruleClick 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClickAccess().getGroup()); }
		(rule__Click__Group__0)
		{ after(grammarAccess.getClickAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperation
entryRuleOperation
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationAccess().getGroup()); }
		(rule__Operation__Group__0)
		{ after(grammarAccess.getOperationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameters
entryRuleParameters
:
{ before(grammarAccess.getParametersRule()); }
	 ruleParameters
{ after(grammarAccess.getParametersRule()); } 
	 EOF 
;

// Rule Parameters
ruleParameters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParametersAccess().getParametersAssignment()); }
		(rule__Parameters__ParametersAssignment)*
		{ after(grammarAccess.getParametersAccess().getParametersAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRead
entryRuleRead
:
{ before(grammarAccess.getReadRule()); }
	 ruleRead
{ after(grammarAccess.getReadRule()); } 
	 EOF 
;

// Rule Read
ruleRead 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReadAccess().getGroup()); }
		(rule__Read__Group__0)
		{ after(grammarAccess.getReadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSeries
entryRuleSeries
:
{ before(grammarAccess.getSeriesRule()); }
	 ruleSeries
{ after(grammarAccess.getSeriesRule()); } 
	 EOF 
;

// Rule Series
ruleSeries 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSeriesAccess().getGroup()); }
		(rule__Series__Group__0)
		{ after(grammarAccess.getSeriesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getGroup()); }
		(rule__Type__Group__0)
		{ after(grammarAccess.getTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVal
entryRuleVal
:
{ before(grammarAccess.getValRule()); }
	 ruleVal
{ after(grammarAccess.getValRule()); } 
	 EOF 
;

// Rule Val
ruleVal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValAccess().getAlternatives()); }
		(rule__Val__Alternatives)
		{ after(grammarAccess.getValAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getGroup()); }
		(rule__Value__Group__0)
		{ after(grammarAccess.getValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableGet
entryRuleVariableGet
:
{ before(grammarAccess.getVariableGetRule()); }
	 ruleVariableGet
{ after(grammarAccess.getVariableGetRule()); } 
	 EOF 
;

// Rule VariableGet
ruleVariableGet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableGetAccess().getVarNameAssignment()); }
		(rule__VariableGet__VarNameAssignment)
		{ after(grammarAccess.getVariableGetAccess().getVarNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableSet
entryRuleVariableSet
:
{ before(grammarAccess.getVariableSetRule()); }
	 ruleVariableSet
{ after(grammarAccess.getVariableSetRule()); } 
	 EOF 
;

// Rule VariableSet
ruleVariableSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableSetAccess().getGroup()); }
		(rule__VariableSet__Group__0)
		{ after(grammarAccess.getVariableSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BoolEnum
ruleBoolEnum
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolEnumAccess().getAlternatives()); }
		(rule__BoolEnum__Alternatives)
		{ after(grammarAccess.getBoolEnumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule BrowserEnum
ruleBrowserEnum
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBrowserEnumAccess().getAlternatives()); }
		(rule__BrowserEnum__Alternatives)
		{ after(grammarAccess.getBrowserEnumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ClickableEnum
ruleClickableEnum
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickableEnumAccess().getAlternatives()); }
		(rule__ClickableEnum__Alternatives)
		{ after(grammarAccess.getClickableEnumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ComparisonOperatorEnum
ruleComparisonOperatorEnum
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonOperatorEnumAccess().getAlternatives()); }
		(rule__ComparisonOperatorEnum__Alternatives)
		{ after(grammarAccess.getComparisonOperatorEnumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ConstraintTypeEnum
ruleConstraintTypeEnum
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintTypeEnumAccess().getAlternatives()); }
		(rule__ConstraintTypeEnum__Alternatives)
		{ after(grammarAccess.getConstraintTypeEnumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ReadableEnum
ruleReadableEnum
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReadableEnumAccess().getAlternatives()); }
		(rule__ReadableEnum__Alternatives)
		{ after(grammarAccess.getReadableEnumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNoReturn__ActionAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionNoReturnAccess().getActionAllParserRuleCall_0_0()); }
		ruleAll
		{ after(grammarAccess.getActionNoReturnAccess().getActionAllParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionNoReturnAccess().getActionBrowseParserRuleCall_0_1()); }
		ruleBrowse
		{ after(grammarAccess.getActionNoReturnAccess().getActionBrowseParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionNoReturnAccess().getActionCheckParserRuleCall_0_2()); }
		ruleCheck
		{ after(grammarAccess.getActionNoReturnAccess().getActionCheckParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionNoReturnAccess().getActionClickParserRuleCall_0_3()); }
		ruleClick
		{ after(grammarAccess.getActionNoReturnAccess().getActionClickParserRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getActionNoReturnAccess().getActionTypeParserRuleCall_0_4()); }
		ruleType
		{ after(grammarAccess.getActionNoReturnAccess().getActionTypeParserRuleCall_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getActionNoReturnAccess().getActionVariableSetParserRuleCall_0_5()); }
		ruleVariableSet
		{ after(grammarAccess.getActionNoReturnAccess().getActionVariableSetParserRuleCall_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionReturn__ActionAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionReturnAccess().getActionCountParserRuleCall_0_0()); }
		ruleCount
		{ after(grammarAccess.getActionReturnAccess().getActionCountParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionReturnAccess().getActionReadParserRuleCall_0_1()); }
		ruleRead
		{ after(grammarAccess.getActionReturnAccess().getActionReadParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionBoolReturn__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionBoolReturnAccess().getComparisonParserRuleCall_0()); }
		ruleComparison
		{ after(grammarAccess.getActionBoolReturnAccess().getComparisonParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionBoolReturnAccess().getConstraintParserRuleCall_1()); }
		ruleConstraint
		{ after(grammarAccess.getActionBoolReturnAccess().getConstraintParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__ParametersAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCountAccess().getParametersParametersParserRuleCall_1_0_0()); }
		ruleParameters
		{ after(grammarAccess.getCountAccess().getParametersParametersParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCountAccess().getParametersActionReturnParserRuleCall_1_0_1()); }
		ruleActionReturn
		{ after(grammarAccess.getCountAccess().getParametersActionReturnParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ParameterAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getParameterAttributeParserRuleCall_1_0_0()); }
		ruleAttribute
		{ after(grammarAccess.getParameterAccess().getParameterAttributeParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterAccess().getParameterValueParserRuleCall_1_0_1()); }
		ruleValue
		{ after(grammarAccess.getParameterAccess().getParameterValueParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Val__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValAccess().getVariableGetParserRuleCall_0()); }
		ruleVariableGet
		{ after(grammarAccess.getValAccess().getVariableGetParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValAccess().getSTRINGTerminalRuleCall_1()); }
		RULE_STRING
		{ after(grammarAccess.getValAccess().getSTRINGTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getValAccess().getBoolAssignment_2()); }
		(rule__Val__BoolAssignment_2)
		{ after(grammarAccess.getValAccess().getBoolAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolEnum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBoolEnumAccess().getTrueEnumLiteralDeclaration_0()); }
		('true')
		{ after(grammarAccess.getBoolEnumAccess().getTrueEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBoolEnumAccess().getFalseEnumLiteralDeclaration_1()); }
		('false')
		{ after(grammarAccess.getBoolEnumAccess().getFalseEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BrowserEnum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBrowserEnumAccess().getFirefoxEnumLiteralDeclaration_0()); }
		('firefox')
		{ after(grammarAccess.getBrowserEnumAccess().getFirefoxEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBrowserEnumAccess().getIEEnumLiteralDeclaration_1()); }
		('ie')
		{ after(grammarAccess.getBrowserEnumAccess().getIEEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClickableEnum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickableEnumAccess().getButtonEnumLiteralDeclaration_0()); }
		('button')
		{ after(grammarAccess.getClickableEnumAccess().getButtonEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getClickableEnumAccess().getLinkEnumLiteralDeclaration_1()); }
		('link')
		{ after(grammarAccess.getClickableEnumAccess().getLinkEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getClickableEnumAccess().getInputEnumLiteralDeclaration_2()); }
		('input')
		{ after(grammarAccess.getClickableEnumAccess().getInputEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperatorEnum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonOperatorEnumAccess().getEqualEnumLiteralDeclaration_0()); }
		('==')
		{ after(grammarAccess.getComparisonOperatorEnumAccess().getEqualEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorEnumAccess().getSuperiorEnumLiteralDeclaration_1()); }
		('>')
		{ after(grammarAccess.getComparisonOperatorEnumAccess().getSuperiorEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorEnumAccess().getInferiorEnumLiteralDeclaration_2()); }
		('<')
		{ after(grammarAccess.getComparisonOperatorEnumAccess().getInferiorEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorEnumAccess().getSupEqualEnumLiteralDeclaration_3()); }
		('>=')
		{ after(grammarAccess.getComparisonOperatorEnumAccess().getSupEqualEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorEnumAccess().getInfEqualEnumLiteralDeclaration_4()); }
		('<=')
		{ after(grammarAccess.getComparisonOperatorEnumAccess().getInfEqualEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintTypeEnum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintTypeEnumAccess().getContainEnumLiteralDeclaration_0()); }
		('contain')
		{ after(grammarAccess.getConstraintTypeEnumAccess().getContainEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintTypeEnumAccess().getEnabledEnumLiteralDeclaration_1()); }
		('enabled')
		{ after(grammarAccess.getConstraintTypeEnumAccess().getEnabledEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadableEnum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReadableEnumAccess().getButtonEnumLiteralDeclaration_0()); }
		('button')
		{ after(grammarAccess.getReadableEnumAccess().getButtonEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getReadableEnumAccess().getLinkEnumLiteralDeclaration_1()); }
		('link')
		{ after(grammarAccess.getReadableEnumAccess().getLinkEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getReadableEnumAccess().getInputEnumLiteralDeclaration_2()); }
		('input')
		{ after(grammarAccess.getReadableEnumAccess().getInputEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getReadableEnumAccess().getH1EnumLiteralDeclaration_3()); }
		('h1')
		{ after(grammarAccess.getReadableEnumAccess().getH1EnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__All__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__All__Group__0__Impl
	rule__All__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__All__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllAccess().getAllKeyword_0()); }
	'all'
	{ after(grammarAccess.getAllAccess().getAllKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__All__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__All__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__All__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAllAccess().getOperationAssignment_1()); }
	(rule__All__OperationAssignment_1)
	{ after(grammarAccess.getAllAccess().getOperationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getAttributeKeyword_0()); }
	'attribute'
	{ after(grammarAccess.getAttributeAccess().getAttributeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getAttributeNameAssignment_1()); }
	(rule__Attribute__AttributeNameAssignment_1)
	{ after(grammarAccess.getAttributeAccess().getAttributeNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getAttributeValueAssignment_2()); }
	(rule__Attribute__AttributeValueAssignment_2)
	{ after(grammarAccess.getAttributeAccess().getAttributeValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Browse__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Browse__Group__0__Impl
	rule__Browse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Browse__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrowseAccess().getBrowseKeyword_0()); }
	'browse'
	{ after(grammarAccess.getBrowseAccess().getBrowseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Browse__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Browse__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Browse__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrowseAccess().getUrlAssignment_1()); }
	(rule__Browse__UrlAssignment_1)
	{ after(grammarAccess.getBrowseAccess().getUrlAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__0__Impl
	rule__Check__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getCheckKeyword_0()); }
	'check'
	{ after(grammarAccess.getCheckAccess().getCheckKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Check__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckAccess().getActionAssignment_1()); }
	(rule__Check__ActionAssignment_1)
	{ after(grammarAccess.getCheckAccess().getActionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparisonKeyword_0()); }
	'comparison'
	{ after(grammarAccess.getComparisonAccess().getComparisonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
	rule__Comparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getFirstValAssignment_1()); }
	(rule__Comparison__FirstValAssignment_1)
	{ after(grammarAccess.getComparisonAccess().getFirstValAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__2__Impl
	rule__Comparison__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getComparatorOperatorAssignment_2()); }
	(rule__Comparison__ComparatorOperatorAssignment_2)
	{ after(grammarAccess.getComparisonAccess().getComparatorOperatorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getSecondValAssignment_3()); }
	(rule__Comparison__SecondValAssignment_3)
	{ after(grammarAccess.getComparisonAccess().getSecondValAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getReadableElementAssignment_0()); }
	(rule__Constraint__ReadableElementAssignment_0)
	{ after(grammarAccess.getConstraintAccess().getReadableElementAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getConstraintTypeAssignment_1()); }
	(rule__Constraint__ConstraintTypeAssignment_1)
	{ after(grammarAccess.getConstraintAccess().getConstraintTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__2__Impl
	rule__Constraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getExpectedValAssignment_2()); }
	(rule__Constraint__ExpectedValAssignment_2)
	{ after(grammarAccess.getConstraintAccess().getExpectedValAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getParametersAssignment_3()); }
	(rule__Constraint__ParametersAssignment_3)
	{ after(grammarAccess.getConstraintAccess().getParametersAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Count__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Count__Group__0__Impl
	rule__Count__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountAccess().getCountKeyword_0()); }
	'count'
	{ after(grammarAccess.getCountAccess().getCountKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Count__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCountAccess().getParametersAssignment_1()); }
	(rule__Count__ParametersAssignment_1)
	{ after(grammarAccess.getCountAccess().getParametersAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Click__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__0__Impl
	rule__Click__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getClickKeyword_0()); }
	'click'
	{ after(grammarAccess.getClickAccess().getClickKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__1__Impl
	rule__Click__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getClickableElementAssignment_1()); }
	(rule__Click__ClickableElementAssignment_1)
	{ after(grammarAccess.getClickAccess().getClickableElementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Click__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClickAccess().getParametersAssignment_2()); }
	(rule__Click__ParametersAssignment_2)
	{ after(grammarAccess.getClickAccess().getParametersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__0__Impl
	rule__Operation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getActionNoReturnParserRuleCall_0()); }
	ruleActionNoReturn
	{ after(grammarAccess.getOperationAccess().getActionNoReturnParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getOperationAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParameterAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getParameterAssignment_1()); }
	(rule__Parameter__ParameterAssignment_1)
	{ after(grammarAccess.getParameterAccess().getParameterAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getParameterAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Read__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Read__Group__0__Impl
	rule__Read__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadAccess().getReadKeyword_0()); }
	'read'
	{ after(grammarAccess.getReadAccess().getReadKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Read__Group__1__Impl
	rule__Read__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadAccess().getReadableElementAssignment_1()); }
	(rule__Read__ReadableElementAssignment_1)
	{ after(grammarAccess.getReadAccess().getReadableElementAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Read__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadAccess().getParametersAssignment_2()); }
	(rule__Read__ParametersAssignment_2)
	{ after(grammarAccess.getReadAccess().getParametersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Series__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Series__Group__0__Impl
	rule__Series__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Series__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeriesAccess().getOpenKeyword_0()); }
	'open'
	{ after(grammarAccess.getSeriesAccess().getOpenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Series__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Series__Group__1__Impl
	rule__Series__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Series__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeriesAccess().getBrowserAssignment_1()); }
	(rule__Series__BrowserAssignment_1)
	{ after(grammarAccess.getSeriesAccess().getBrowserAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Series__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Series__Group__2__Impl
	rule__Series__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Series__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeriesAccess().getExpectedReturnAssignment_2()); }
	(rule__Series__ExpectedReturnAssignment_2)
	{ after(grammarAccess.getSeriesAccess().getExpectedReturnAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Series__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Series__Group__3__Impl
	rule__Series__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Series__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeriesAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getSeriesAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Series__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Series__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Series__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSeriesAccess().getOperationsAssignment_4()); }
	(rule__Series__OperationsAssignment_4)*
	{ after(grammarAccess.getSeriesAccess().getOperationsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__0__Impl
	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getTypeKeyword_0()); }
	'type'
	{ after(grammarAccess.getTypeAccess().getTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__1__Impl
	rule__Type__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getTextToTypeAssignment_1()); }
	(rule__Type__TextToTypeAssignment_1)
	{ after(grammarAccess.getTypeAccess().getTextToTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeAccess().getParametersAssignment_2()); }
	(rule__Type__ParametersAssignment_2)
	{ after(grammarAccess.getTypeAccess().getParametersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Value__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group__0__Impl
	rule__Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getValueKeyword_0()); }
	'value'
	{ after(grammarAccess.getValueAccess().getValueKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Value__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueAccess().getValueAssignment_1()); }
	(rule__Value__ValueAssignment_1)
	{ after(grammarAccess.getValueAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableSet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableSet__Group__0__Impl
	rule__VariableSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableSet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableSetAccess().getVarNameAssignment_0()); }
	(rule__VariableSet__VarNameAssignment_0)
	{ after(grammarAccess.getVariableSetAccess().getVarNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableSet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableSet__Group__1__Impl
	rule__VariableSet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableSet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableSetAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getVariableSetAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableSet__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableSet__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableSet__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableSetAccess().getActionAssignment_2()); }
	(rule__VariableSet__ActionAssignment_2)
	{ after(grammarAccess.getVariableSetAccess().getActionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ModelAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getModelSeriesParserRuleCall_0()); }
		ruleSeries
		{ after(grammarAccess.getModelAccess().getModelSeriesParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionNoReturn__ActionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionNoReturnAccess().getActionAlternatives_0()); }
		(rule__ActionNoReturn__ActionAlternatives_0)
		{ after(grammarAccess.getActionNoReturnAccess().getActionAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionReturn__ActionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionReturnAccess().getActionAlternatives_0()); }
		(rule__ActionReturn__ActionAlternatives_0)
		{ after(grammarAccess.getActionReturnAccess().getActionAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__All__OperationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllAccess().getOperationActionNoReturnParserRuleCall_1_0()); }
		ruleActionNoReturn
		{ after(grammarAccess.getAllAccess().getOperationActionNoReturnParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__AttributeNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getAttributeNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getAttributeAccess().getAttributeNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__AttributeValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getAttributeValueSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getAttributeAccess().getAttributeValueSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Browse__UrlAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBrowseAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getBrowseAccess().getUrlSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__ActionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckAccess().getActionActionBoolReturnParserRuleCall_1_0()); }
		ruleActionBoolReturn
		{ after(grammarAccess.getCheckAccess().getActionActionBoolReturnParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__FirstValAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getFirstValValParserRuleCall_1_0()); }
		ruleVal
		{ after(grammarAccess.getComparisonAccess().getFirstValValParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__ComparatorOperatorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getComparatorOperatorComparisonOperatorEnumEnumRuleCall_2_0()); }
		ruleComparisonOperatorEnum
		{ after(grammarAccess.getComparisonAccess().getComparatorOperatorComparisonOperatorEnumEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__SecondValAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getSecondValValParserRuleCall_3_0()); }
		ruleVal
		{ after(grammarAccess.getComparisonAccess().getSecondValValParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ReadableElementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getReadableElementReadableEnumEnumRuleCall_0_0()); }
		ruleReadableEnum
		{ after(grammarAccess.getConstraintAccess().getReadableElementReadableEnumEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ConstraintTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getConstraintTypeConstraintTypeEnumEnumRuleCall_1_0()); }
		ruleConstraintTypeEnum
		{ after(grammarAccess.getConstraintAccess().getConstraintTypeConstraintTypeEnumEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ExpectedValAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getExpectedValValParserRuleCall_2_0()); }
		ruleVal
		{ after(grammarAccess.getConstraintAccess().getExpectedValValParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ParametersAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getParametersParametersParserRuleCall_3_0()); }
		ruleParameters
		{ after(grammarAccess.getConstraintAccess().getParametersParametersParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Count__ParametersAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCountAccess().getParametersAlternatives_1_0()); }
		(rule__Count__ParametersAlternatives_1_0)
		{ after(grammarAccess.getCountAccess().getParametersAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__ClickableElementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickAccess().getClickableElementClickableEnumEnumRuleCall_1_0()); }
		ruleClickableEnum
		{ after(grammarAccess.getClickAccess().getClickableElementClickableEnumEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__ParametersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClickAccess().getParametersParametersParserRuleCall_2_0()); }
		ruleParameters
		{ after(grammarAccess.getClickAccess().getParametersParametersParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ParameterAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getParameterAlternatives_1_0()); }
		(rule__Parameter__ParameterAlternatives_1_0)
		{ after(grammarAccess.getParameterAccess().getParameterAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__ParametersAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParametersAccess().getParametersParameterParserRuleCall_0()); }
		ruleParameter
		{ after(grammarAccess.getParametersAccess().getParametersParameterParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__ReadableElementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReadAccess().getReadableElementReadableEnumEnumRuleCall_1_0()); }
		ruleReadableEnum
		{ after(grammarAccess.getReadAccess().getReadableElementReadableEnumEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Read__ParametersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReadAccess().getParametersParametersParserRuleCall_2_0()); }
		ruleParameters
		{ after(grammarAccess.getReadAccess().getParametersParametersParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Series__BrowserAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSeriesAccess().getBrowserBrowserEnumEnumRuleCall_1_0()); }
		ruleBrowserEnum
		{ after(grammarAccess.getSeriesAccess().getBrowserBrowserEnumEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Series__ExpectedReturnAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSeriesAccess().getExpectedReturnBoolEnumEnumRuleCall_2_0()); }
		ruleBoolEnum
		{ after(grammarAccess.getSeriesAccess().getExpectedReturnBoolEnumEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Series__OperationsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSeriesAccess().getOperationsOperationParserRuleCall_4_0()); }
		ruleOperation
		{ after(grammarAccess.getSeriesAccess().getOperationsOperationParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__TextToTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getTextToTypeValParserRuleCall_1_0()); }
		ruleVal
		{ after(grammarAccess.getTypeAccess().getTextToTypeValParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ParametersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getParametersParametersParserRuleCall_2_0()); }
		ruleParameters
		{ after(grammarAccess.getTypeAccess().getParametersParametersParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Val__BoolAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValAccess().getBoolBoolEnumEnumRuleCall_2_0()); }
		ruleBoolEnum
		{ after(grammarAccess.getValAccess().getBoolBoolEnumEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getValueValParserRuleCall_1_0()); }
		ruleVal
		{ after(grammarAccess.getValueAccess().getValueValParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableGet__VarNameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableGetAccess().getVarNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableGetAccess().getVarNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableSet__VarNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableSetAccess().getVarNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableSetAccess().getVarNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableSet__ActionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableSetAccess().getActionActionReturnParserRuleCall_2_0()); }
		ruleActionReturn
		{ after(grammarAccess.getVariableSetAccess().getActionActionReturnParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
